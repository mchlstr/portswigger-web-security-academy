// This function waits for the DOM content to be fully loaded before executing the provided callback function.
let forgotPwdReady = (callback) => {
    // Check if the DOM content has already been loaded
    if (document.readyState !== "loading") {
        // If the DOM content is already loaded, execute the callback immediately
        callback();
    } else {
        // If the DOM content is still loading, add an event listener to execute the callback once the DOMContentLoaded event is fired
        document.addEventListener("DOMContentLoaded", callback);
    }
}

// This function encodes form data into URL-encoded format.
function urlencodeFormData(fd){
    let s = '';
    function encode(s){ return encodeURIComponent(s).replace(/%20/g,'+'); }
    // Iterate over each entry (key-value pair) in the FormData object
    for (let pair of fd.entries()) {
        // Check if the value is a string
        if (typeof pair[1] == 'string') {
            // If s is not empty, add an ampersand (&) before the current key-value pair
            // Then encode the key and value using the encode function
            // Concatenate them in the format key=value and append to the string s
            s += (s ? '&' : '') + encode(pair[0]) + '=' + encode(pair[1]);
        }
    }
    // Return the URL-encoded string s
    return s;

// This function validates inputs, submits form data via fetch, and handles the response.
const validateInputsAndCreateMsg = () => {
    try {
        // Get reference to the element displaying error messages
        const forgotPasswordError = document.getElementById("forgot-password-error");
        // Clear any previous error message
        forgotPasswordError.textContent = "";
        // Get reference to the forgot password form
        const forgotPasswordForm = document.getElementById("forgot-password-form");
        // Get reference to the username input field
        const usernameInput = document.getElementsByName("username").item(0);
        // If username input exists and is invalid, display validation message and return
        if (usernameInput && !usernameInput.checkValidity()) {
            usernameInput.reportValidity();
            return;
        }
        // Create a new FormData object containing the form data
        const formData = new FormData(forgotPasswordForm);
        // Create configuration for the fetch request
        const config = {
            method: "POST",
            headers: {
                "Content-Type": "x-www-form-urlencoded",
            },
            // Encode form data into URL-encoded format
            body: urlencodeFormData(formData)
        };
        // Submit form data via fetch and handle the response
        fetch(window.location.pathname, config)
            .then(response => response.json())
            .then(jsonResponse => {
                // If the response does not contain a 'result' property, display error message
                if (!jsonResponse.hasOwnProperty("result")) {
                    forgotPasswordError.textContent = "Invalid username";
                }
                // If 'result' property exists, display success message, hide the form, and clear its class
                else {
                    forgotPasswordError.textContent = `Please check your email: "${jsonResponse.result}"`;
                    forgotPasswordForm.className = "";
                    forgotPasswordForm.style.display = "none";
                }
            })
            // Catch and handle any errors that occur during the fetch request
            .catch(err => {
                forgotPasswordError.textContent = "Invalid username";
            });
    }
    // Catch and log any unexpected errors that occur within the function
    catch (error) {
        console.error("Unexpected Error:", error);
    }
}

// This function displays the message generated by validateInputsAndCreateMsg.
const displayMsg = (e) => {
    // Prevent default form submission behavior
    e.preventDefault();
    // Call validateInputsAndCreateMsg to handle form validation and submission
    validateInputsAndCreateMsg(e);
};

// Execute the code when the DOM is ready.
forgotPwdReady(() => {
    // Extract reset token from query string
    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    const resetToken = urlParams.get('reset-token');
    // If a reset token is present in the query string, redirect to the forgot password page with the token
    if (resetToken) {
        window.location.href = `/forgot-password?reset_token=${resetToken}`;
    }
    // If no reset token is present, attach event listener to the "forgot password" button
    else {
        const forgotPasswordBtn = document.getElementById("forgot-password-btn");
        forgotPasswordBtn.addEventListener("click", displayMsg);
    }
});
